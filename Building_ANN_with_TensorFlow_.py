# -*- coding: utf-8 -*-
"""Building ANN with Tensorflow .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E1Dc8vhbKxdrNwL1FVKMAHuigwhLmbma

**Steps for Building ANN**

* Data preprocessing
* Add input layer
* Random w int
* Add Hidden layers
* Select Optimizer, Loss function, and Perfomance Metrics
* Compile the model
* Use model fit to train the model
* Evalute the model
* adjust optimization Parameters or model if needed
"""

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Flatten, Dense

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split

dataset = pd.read_csv("/content/drive/My Drive/Datasets/Churn_Modelling.csv")
dataset.head()

x = dataset.drop(labels=['RowNumber','CustomerId','Surname','Exited'], axis =1)
y = dataset['Exited']

x.shape, y.shape

x.head()

y.head()

from sklearn.preprocessing import LabelEncoder

label = LabelEncoder()
x['Geography'] = label.fit_transform(x['Geography'])
x['Gender'] = label.fit_transform(x['Gender'])

x.head(10)

x = pd.get_dummies(x, drop_first=True, columns=['Geography'])
x.head()

"""**Feature Standardization**"""

from sklearn.preprocessing import StandardScaler

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 0, stratify = y )

scaler = StandardScaler()
x_train = scaler.fit_transform(x_train)
x_test = scaler.fit_transform(x_test)

x_train

"""**Build ANN**"""

model = Sequential()
model.add(Dense(x.shape[1], activation='relu', input_dim = x.shape[1]))
model.add(Dense(128, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

model.compile(optimizer='adam', loss = 'binary_crossentropy', metrics=['accuracy'])

model.fit(x_train, y_train.to_numpy(), batch_size=10, epochs=10, verbose=1)

y_pred = model.predict_classes(x_test)

y_pred

y_test

model.evaluate(x_test, y_test.to_numpy())

from sklearn.metrics import confusion_matrix, accuracy_score

confusion_matrix(y_test, y_pred)

accuracy_score(y_test, y_pred)

